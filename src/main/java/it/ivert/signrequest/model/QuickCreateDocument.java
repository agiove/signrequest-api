package it.ivert.signrequest.model;

import java.io.Serializable;
import java.util.List;

public class QuickCreateDocument implements Serializable, SRModel {

    /* string <email> (From email) [ 1 .. 255 ] characters
    * Email of user sending the SignRequest (must be a validated email) */
    private String fromEmail;

    /* string (From email name) <= 255 characters Nullable
    * Name to be used in the From email header, e.g. {from_email_name} <no-reply@signrequest.com> */
    private String fromEmailName;

    /* boolean (Is being prepared) Nullable
    * Have the sender of a SignRequest prepare the document before sending the request out, see: prepare using the web interface */
    private boolean isBeingPrepared;

    /* string <uri> (Redirect url) <= 2100 characters Nullable
    * URL at which SignRequest will redirect to when a document is signed */
    private String redirectUrl;

    /* Array of object (RequiredAttachment)
    * Attachments that signers are required to upload */
    //private List requiredAttachments;

    /*  boolean (Disable attachments)
    * Disable uploading/adding of attachments */
    private boolean disableAttachments;

    /* boolean (Disable text signatures)
    * Disable usage of signatures generated by typing (text) */
    private boolean disableTextSignatures;

    /* boolean (Disable text)
    Disable adding of text */
    private boolean disableText;

    /* boolean (Disable date)
    Disable adding of dates */
    private boolean disableDate;

    /* boolean (Disable emails)
    Disable all SignRequest status emails as well as the email that contains the signed documents */
    private boolean disableEmails;

    /* boolean (Disable upload signatures)
    Disable usage of uploaded signatures (images) */
    private boolean disableUploadSignatures;

    /* boolean (Text message verification locked) Nullable
    When true a text message verification is needed before the signer can see the document */
    private boolean textMessageVerificationLocked;

    /* string (Subject) <= 512 characters Nullable
    Subject of SignRequest email */
    private String subject;

    /* string (Message) Nullable
    Message to include in SignRequest email, may contain the following html tags: a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong */
    private String message;

    /* string (Who) Nullable
    Default: "o"
    Enum:"m" "mo" "o"
    m: only me, mo: me and others, o: only others */
    private String who;

    /* boolean (Send reminders)
    Automatically remind signers to sign a document */
    private boolean sendReminders;

    /*  required
    Array of object (Signer) */
    private List<Signer> signers;

    /* string <uri> (Template) Nullable */
    private String template;

    private String fileFromUrl;
    /*
string <uri> (File from url) <= 2100 characters Nullable

    Publicly accessible URL of document to be downloaded by SignRequest */

    /*






    integration
    string (Integration) Nullable
    Enum:"mfiles" "salesforce" "formdesk" "zapier" "txhash"
    integration_data
    string (Integration data) Nullable
    name
    string (Name) <= 255 characters Nullable

    Defaults to filename, including extension
    external_id
    string (External id) <= 255 characters Nullable

    ID used to reference document in external system
    frontend_id
    string (Frontend id) <= 255 characters Nullable

    Shared secret used in conjunction with SignRequest-js client to grant user access to a document that's not a member of the document's team

    events_callback_url
string <uri> (Events callback url) <= 2100 characters Nullable

    URL at which to receive event callbacks for this document
            file_from_content
    string (File from content) Nullable

    Base64 encoded document content
    file_from_content_name
    string (File from content name) Nullable

    Filename, including extension. Required when using file_from_content.

            prefill_tags
    Array of object (InlinePrefillTags)

    Prefill signer input data, see prefill tags
    integrations
    Array of object (InlineIntegrationData)
    file_from_sf
    object (File from sf)
    auto_delete_days
    integer (Auto delete days) [ 1 .. 730 ] Nullable

    Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted
    */

    public String getFromEmail() {
        return fromEmail;
    }

    public void setFromEmail(String fromEmail) {
        this.fromEmail = fromEmail;
    }

    public String getFromEmailName() {
        return fromEmailName;
    }

    public void setFromEmailName(String fromEmailName) {
        this.fromEmailName = fromEmailName;
    }

    public boolean isBeingPrepared() {
        return isBeingPrepared;
    }

    public void setBeingPrepared(boolean beingPrepared) {
        isBeingPrepared = beingPrepared;
    }

    public String getRedirectUrl() {
        return redirectUrl;
    }

    public void setRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    public boolean isDisableAttachments() {
        return disableAttachments;
    }

    public void setDisableAttachments(boolean disableAttachments) {
        this.disableAttachments = disableAttachments;
    }

    public boolean isDisableTextSignatures() {
        return disableTextSignatures;
    }

    public void setDisableTextSignatures(boolean disableTextSignatures) {
        this.disableTextSignatures = disableTextSignatures;
    }

    public boolean isDisableText() {
        return disableText;
    }

    public void setDisableText(boolean disableText) {
        this.disableText = disableText;
    }

    public boolean isDisableDate() {
        return disableDate;
    }

    public void setDisableDate(boolean disableDate) {
        this.disableDate = disableDate;
    }

    public boolean isDisableEmails() {
        return disableEmails;
    }

    public void setDisableEmails(boolean disableEmails) {
        this.disableEmails = disableEmails;
    }

    public boolean isDisableUploadSignatures() {
        return disableUploadSignatures;
    }

    public void setDisableUploadSignatures(boolean disableUploadSignatures) {
        this.disableUploadSignatures = disableUploadSignatures;
    }

    public boolean isTextMessageVerificationLocked() {
        return textMessageVerificationLocked;
    }

    public void setTextMessageVerificationLocked(boolean textMessageVerificationLocked) {
        this.textMessageVerificationLocked = textMessageVerificationLocked;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getWho() {
        return who;
    }

    public void setWho(String who) {
        this.who = who;
    }

    public boolean isSendReminders() {
        return sendReminders;
    }

    public void setSendReminders(boolean sendReminders) {
        this.sendReminders = sendReminders;
    }

    public List<Signer> getSigners() {
        return signers;
    }

    public void setSigners(List<Signer> signers) {
        this.signers = signers;
    }

    public String getTemplate() {
        return template;
    }

    public void setTemplate(String template) {
        this.template = template;
    }

    public String getFileFromUrl() {
        return fileFromUrl;
    }

    public void setFileFromUrl(String fileFromUrl) {
        this.fileFromUrl = fileFromUrl;
    }
}
